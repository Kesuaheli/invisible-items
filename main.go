package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"os"
	"time"
)

const (
	versionManifestURL string = "https://piston-meta.mojang.com/mc/game/version_manifest_v2.json"
)

var (
	custom_model_data *uint
	mcVersion         *string
)

func init() {
	custom_model_data = flag.Uint("model", 1, "The custom_model_data value to use. Defaults to 1.")
	mcVersion = flag.String("mc", "release", "The Minecraft version string to search for. If set to \"release\" the latest release is beeing used. If set to \"snapshot\" the latest snapshot is beeing used. Defaults to \"release\".")
	flag.Parse()
}

func main() {
	fmt.Printf("Using:\n\tcustom_model_data = %d\n\tminecraft version = %s\n\n", *custom_model_data, *mcVersion)

	fmt.Println("Cleaning pack folder...")
	if err := os.RemoveAll("pack"); err != nil {
		fmt.Printf("Failed to remove pack folder: %v\n", err)
		os.Exit(-1)
	}

	version, err := GetVersion(versionManifestURL, *mcVersion)
	if err != nil {
		fmt.Printf("Error: %v\n", err)
		os.Exit(-1)
	}
	fmt.Printf("Got %s %s from %s!\n", version.Type, version.ID, version.Time.Format(time.RFC1123))

	fmt.Println("Downloading client JAR...")
	clientData, err := version.GetClient()
	if err != nil {
		fmt.Printf("Error: %v\n", err)
		os.Exit(-1)
	}

	fmt.Printf("Extracting item models from client...\n")
	itemModels := clientData.GetItemModels()
	fmt.Printf("Found %d item models!\n", len(itemModels))

	fmt.Println("Writing item models to pack folder...")
	os.MkdirAll("pack/assets/minecraft/models/item", 0644)
	for name, m := range itemModels {
		m.Overrides = append(m.Overrides, ModelOverride{
			Model: "kesu:item/invisible",
			Predicate: ModelOverridePredicate{
				CustomModelData: *custom_model_data,
			},
		})

		buf, _ := json.MarshalIndent(m, "", "  ")
		err := os.WriteFile("pack/assets/minecraft/models/item/"+name, buf, 0644)
		if err != nil {
			fmt.Printf("Failed to write item model \"%s\": %v", name, err)
		}
	}

	buf, _ := json.MarshalIndent(Model{Elements: []any{}}, "", "  ")
	os.MkdirAll("pack/assets/kesu/models/item", 0644)
	err = os.WriteFile("pack/assets/kesu/models/item/invisible.json", buf, 0644)
	if err != nil {
		fmt.Printf("Failed to write item invisible model: %v", err)
	}

	fmt.Printf("Writing pack.mcmeta with pack format of %d\n", clientData.Versions().PackVersion.Resource)
	buf, _ = json.MarshalIndent(PackMCMeta{PackMCMetaPack: PackMCMetaPack{
		PackFormat:  clientData.Versions().PackVersion.Resource,
		Description: fmt.Sprintf("Autogenerated pack for invisible item models on custom model data %d.", *custom_model_data),
	}}, "", "	")
	err = os.WriteFile("pack/pack.mcmeta", buf, 0644)
	if err != nil {
		fmt.Printf("Failed to write pack.mcmeta: %v", err)
	}
}
